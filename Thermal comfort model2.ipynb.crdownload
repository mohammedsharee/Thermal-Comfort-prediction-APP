{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Thermal Comfort Prediction Model\n",
    "\n",
    "ASHRAE Global Thermal Comfort Database II given by https://datadryad.org/stash/dataset/doi:10.6078/D1F671"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn import svm\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import RandomizedSearchCV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df=pd.read_excel(\"C:\\\\Users\\\\Mohammed Shreef\\\\Desktop\\\\HiWi\\\\ashrae_data.xlsx\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "NT=pd.DataFrame(df.isnull().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Publication (Citation)</th>\n",
       "      <td>1655</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Data contributor</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Year</th>\n",
       "      <td>248</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Season</th>\n",
       "      <td>241</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Koppen climate classification</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Climate</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>City</th>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Country</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Building type</th>\n",
       "      <td>4199</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cooling startegy_building level</th>\n",
       "      <td>1227</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cooling startegy_operation mode for MM buildings</th>\n",
       "      <td>81064</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Heating strategy_building level</th>\n",
       "      <td>69818</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>64004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sex</th>\n",
       "      <td>40548</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Thermal sensation</th>\n",
       "      <td>3129</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Thermal sensation acceptability</th>\n",
       "      <td>45139</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Thermal preference</th>\n",
       "      <td>22083</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Air movement acceptability</th>\n",
       "      <td>91236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Air movement preference</th>\n",
       "      <td>64208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Thermal comfort</th>\n",
       "      <td>71248</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PMV</th>\n",
       "      <td>40849</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PPD</th>\n",
       "      <td>40849</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SET</th>\n",
       "      <td>41065</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Clo</th>\n",
       "      <td>7920</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Met</th>\n",
       "      <td>17164</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>activity_10</th>\n",
       "      <td>98773</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>activity_20</th>\n",
       "      <td>97884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>activity_30</th>\n",
       "      <td>98829</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>activity_60</th>\n",
       "      <td>97986</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Air temperature (¡C)</th>\n",
       "      <td>7672</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Air temperature (¡F)</th>\n",
       "      <td>7672</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ta_h (¡C)</th>\n",
       "      <td>79559</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ta_h (¡F)</th>\n",
       "      <td>79559</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ta_m (¡C)</th>\n",
       "      <td>76435</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ta_m (¡F)</th>\n",
       "      <td>76435</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      0\n",
       "Publication (Citation)                             1655\n",
       "Data contributor                                      0\n",
       "Year                                                248\n",
       "Season                                              241\n",
       "Koppen climate classification                         0\n",
       "Climate                                               0\n",
       "City                                                 13\n",
       "Country                                               0\n",
       "Building type                                      4199\n",
       "Cooling startegy_building level                    1227\n",
       "Cooling startegy_operation mode for MM buildings  81064\n",
       "Heating strategy_building level                   69818\n",
       "Age                                               64004\n",
       "Sex                                               40548\n",
       "Thermal sensation                                  3129\n",
       "Thermal sensation acceptability                   45139\n",
       "Thermal preference                                22083\n",
       "Air movement acceptability                        91236\n",
       "Air movement preference                           64208\n",
       "Thermal comfort                                   71248\n",
       "PMV                                               40849\n",
       "PPD                                               40849\n",
       "SET                                               41065\n",
       "Clo                                                7920\n",
       "Met                                               17164\n",
       "activity_10                                       98773\n",
       "activity_20                                       97884\n",
       "activity_30                                       98829\n",
       "activity_60                                       97986\n",
       "Air temperature (¡C)                               7672\n",
       "Air temperature (¡F)                               7672\n",
       "Ta_h (¡C)                                         79559\n",
       "Ta_h (¡F)                                         79559\n",
       "Ta_m (¡C)                                         76435\n",
       "Ta_m (¡F)                                         76435"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "NT.head(35)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Publication (Citation)', 'Data contributor', 'Year', 'Season',\n",
       "       'Koppen climate classification', 'Climate', 'City', 'Country',\n",
       "       'Building type', 'Cooling startegy_building level',\n",
       "       'Cooling startegy_operation mode for MM buildings',\n",
       "       'Heating strategy_building level', 'Age', 'Sex', 'Thermal sensation',\n",
       "       'Thermal sensation acceptability', 'Thermal preference',\n",
       "       'Air movement acceptability', 'Air movement preference',\n",
       "       'Thermal comfort', 'PMV', 'PPD', 'SET', 'Clo', 'Met', 'activity_10',\n",
       "       'activity_20', 'activity_30', 'activity_60', 'Air temperature (¡C)',\n",
       "       'Air temperature (¡F)', 'Ta_h (¡C)', 'Ta_h (¡F)', 'Ta_m (¡C)',\n",
       "       'Ta_m (¡F)', 'Ta_l (¡C)', 'Ta_l (¡F)', 'Operative temperature (¡C)',\n",
       "       'Operative temperature (¡F)', 'Radiant temperature (¡C)',\n",
       "       'Radiant temperature (¡F)', 'Globe temperature (¡C)',\n",
       "       'Globe temperature (¡F)', 'Tg_h (¡C)', 'Tg_h (¡F)', 'Tg_m (¡C)',\n",
       "       'Tg_m (¡F)', 'Tg_l (¡C)', 'Tg_l (¡F)', 'Relative humidity (%)',\n",
       "       'Humidity preference', 'Humidity sensation', 'Air velocity (m/s)',\n",
       "       'Air velocity (fpm)', 'Velocity_h (m/s)', 'Velocity_h (fpm)',\n",
       "       'Velocity_m (m/s)', 'Velocity_m (fpm)', 'Velocity_l (m/s)',\n",
       "       'Velocity_l (fpm)', 'Subject«s height (cm)', 'Subject«s weight (kg)',\n",
       "       'Blind (curtain)', 'Fan', 'Window', 'Door', 'Heater',\n",
       "       'Outdoor monthly air temperature (¡C)',\n",
       "       'Outdoor monthly air temperature (¡F)', 'Database'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Choosinh only columns(Features) that has more influence on predicting Thermal comfort\n",
    "train_data= ['Clo','Met','Air temperature (¡C)','Radiant temperature (¡C)','Relative humidity (%)','Air velocity (m/s)','Thermal sensation', 'PMV']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "clean_data=df[train_data]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Clo</th>\n",
       "      <th>Met</th>\n",
       "      <th>Air temperature (¡C)</th>\n",
       "      <th>Radiant temperature (¡C)</th>\n",
       "      <th>Relative humidity (%)</th>\n",
       "      <th>Air velocity (m/s)</th>\n",
       "      <th>Thermal sensation</th>\n",
       "      <th>PMV</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Clo</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.021563</td>\n",
       "      <td>-0.465531</td>\n",
       "      <td>-0.496026</td>\n",
       "      <td>-0.256446</td>\n",
       "      <td>-0.109063</td>\n",
       "      <td>-0.184438</td>\n",
       "      <td>-0.005482</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Met</th>\n",
       "      <td>0.021563</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.082616</td>\n",
       "      <td>0.007953</td>\n",
       "      <td>-0.099590</td>\n",
       "      <td>-0.007087</td>\n",
       "      <td>0.060355</td>\n",
       "      <td>0.243532</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Air temperature (¡C)</th>\n",
       "      <td>-0.465531</td>\n",
       "      <td>-0.082616</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.919198</td>\n",
       "      <td>0.115516</td>\n",
       "      <td>0.224138</td>\n",
       "      <td>0.379257</td>\n",
       "      <td>0.781023</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Radiant temperature (¡C)</th>\n",
       "      <td>-0.496026</td>\n",
       "      <td>0.007953</td>\n",
       "      <td>0.919198</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.056033</td>\n",
       "      <td>0.133177</td>\n",
       "      <td>0.441187</td>\n",
       "      <td>0.761725</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Relative humidity (%)</th>\n",
       "      <td>-0.256446</td>\n",
       "      <td>-0.099590</td>\n",
       "      <td>0.115516</td>\n",
       "      <td>0.056033</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.087463</td>\n",
       "      <td>-0.018958</td>\n",
       "      <td>0.077893</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Air velocity (m/s)</th>\n",
       "      <td>-0.109063</td>\n",
       "      <td>-0.007087</td>\n",
       "      <td>0.224138</td>\n",
       "      <td>0.133177</td>\n",
       "      <td>0.087463</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.040815</td>\n",
       "      <td>0.058359</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Thermal sensation</th>\n",
       "      <td>-0.184438</td>\n",
       "      <td>0.060355</td>\n",
       "      <td>0.379257</td>\n",
       "      <td>0.441187</td>\n",
       "      <td>-0.018958</td>\n",
       "      <td>0.040815</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.332810</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PMV</th>\n",
       "      <td>-0.005482</td>\n",
       "      <td>0.243532</td>\n",
       "      <td>0.781023</td>\n",
       "      <td>0.761725</td>\n",
       "      <td>0.077893</td>\n",
       "      <td>0.058359</td>\n",
       "      <td>0.332810</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                               Clo       Met  Air temperature (¡C)  \\\n",
       "Clo                       1.000000  0.021563             -0.465531   \n",
       "Met                       0.021563  1.000000             -0.082616   \n",
       "Air temperature (¡C)     -0.465531 -0.082616              1.000000   \n",
       "Radiant temperature (¡C) -0.496026  0.007953              0.919198   \n",
       "Relative humidity (%)    -0.256446 -0.099590              0.115516   \n",
       "Air velocity (m/s)       -0.109063 -0.007087              0.224138   \n",
       "Thermal sensation        -0.184438  0.060355              0.379257   \n",
       "PMV                      -0.005482  0.243532              0.781023   \n",
       "\n",
       "                          Radiant temperature (¡C)  Relative humidity (%)  \\\n",
       "Clo                                      -0.496026              -0.256446   \n",
       "Met                                       0.007953              -0.099590   \n",
       "Air temperature (¡C)                      0.919198               0.115516   \n",
       "Radiant temperature (¡C)                  1.000000               0.056033   \n",
       "Relative humidity (%)                     0.056033               1.000000   \n",
       "Air velocity (m/s)                        0.133177               0.087463   \n",
       "Thermal sensation                         0.441187              -0.018958   \n",
       "PMV                                       0.761725               0.077893   \n",
       "\n",
       "                          Air velocity (m/s)  Thermal sensation       PMV  \n",
       "Clo                                -0.109063          -0.184438 -0.005482  \n",
       "Met                                -0.007087           0.060355  0.243532  \n",
       "Air temperature (¡C)                0.224138           0.379257  0.781023  \n",
       "Radiant temperature (¡C)            0.133177           0.441187  0.761725  \n",
       "Relative humidity (%)               0.087463          -0.018958  0.077893  \n",
       "Air velocity (m/s)                  1.000000           0.040815  0.058359  \n",
       "Thermal sensation                   0.040815           1.000000  0.332810  \n",
       "PMV                                 0.058359           0.332810  1.000000  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clean_data.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(107583, 8)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clean_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Clo                         float64\n",
       "Met                         float64\n",
       "Air temperature (¡C)        float64\n",
       "Radiant temperature (¡C)    float64\n",
       "Relative humidity (%)       float64\n",
       "Air velocity (m/s)          float64\n",
       "Thermal sensation           float64\n",
       "PMV                         float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clean_data.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Clo                          7920\n",
       "Met                         17164\n",
       "Air temperature (¡C)         7672\n",
       "Radiant temperature (¡C)    75110\n",
       "Relative humidity (%)        9821\n",
       "Air velocity (m/s)          17691\n",
       "Thermal sensation            3129\n",
       "PMV                         40849\n",
       "dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clean_data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Clo</th>\n",
       "      <th>Met</th>\n",
       "      <th>Air temperature (¡C)</th>\n",
       "      <th>Radiant temperature (¡C)</th>\n",
       "      <th>Relative humidity (%)</th>\n",
       "      <th>Air velocity (m/s)</th>\n",
       "      <th>Thermal sensation</th>\n",
       "      <th>PMV</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.25</td>\n",
       "      <td>NaN</td>\n",
       "      <td>24.2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>50.2</td>\n",
       "      <td>0.06</td>\n",
       "      <td>-0.5</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.25</td>\n",
       "      <td>NaN</td>\n",
       "      <td>24.2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>50.2</td>\n",
       "      <td>0.06</td>\n",
       "      <td>-2.1</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.27</td>\n",
       "      <td>NaN</td>\n",
       "      <td>24.2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>50.2</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.5</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.23</td>\n",
       "      <td>NaN</td>\n",
       "      <td>24.2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>50.2</td>\n",
       "      <td>0.06</td>\n",
       "      <td>-2.5</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.34</td>\n",
       "      <td>NaN</td>\n",
       "      <td>24.2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>50.2</td>\n",
       "      <td>0.06</td>\n",
       "      <td>-0.5</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Clo  Met  Air temperature (¡C)  Radiant temperature (¡C)  \\\n",
       "0  0.25  NaN                  24.2                       NaN   \n",
       "1  0.25  NaN                  24.2                       NaN   \n",
       "2  0.27  NaN                  24.2                       NaN   \n",
       "3  0.23  NaN                  24.2                       NaN   \n",
       "4  0.34  NaN                  24.2                       NaN   \n",
       "\n",
       "   Relative humidity (%)  Air velocity (m/s)  Thermal sensation  PMV  \n",
       "0                   50.2                0.06               -0.5  NaN  \n",
       "1                   50.2                0.06               -2.1  NaN  \n",
       "2                   50.2                0.06                0.5  NaN  \n",
       "3                   50.2                0.06               -2.5  NaN  \n",
       "4                   50.2                0.06               -0.5  NaN  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clean_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-13-355eb8397086>:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  clean_data.dropna(inplace=True)\n"
     ]
    }
   ],
   "source": [
    "clean_data.dropna(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(30651, 8)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clean_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-15-4618c159d15b>:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  clean_data['PMV']=clean_data['PMV'].astype('int64')\n"
     ]
    }
   ],
   "source": [
    "clean_data['PMV']=clean_data['PMV'].astype('int64')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-16-83a467edc848>:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  clean_data['Thermal sensation']=clean_data['Thermal sensation'].astype('int64')\n"
     ]
    }
   ],
   "source": [
    "clean_data['Thermal sensation']=clean_data['Thermal sensation'].astype('int64')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# PMV(Predicted mean vote) model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "x=clean_data.iloc[:,0:6]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15677    1\n",
       "15678    1\n",
       "15679    1\n",
       "15680    0\n",
       "15681    0\n",
       "Name: PMV, dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pmv=clean_data.iloc[:,-1]\n",
    "y_pmv.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Clo</th>\n",
       "      <th>Met</th>\n",
       "      <th>Air temperature (¡C)</th>\n",
       "      <th>Radiant temperature (¡C)</th>\n",
       "      <th>Relative humidity (%)</th>\n",
       "      <th>Air velocity (m/s)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>15677</th>\n",
       "      <td>0.47</td>\n",
       "      <td>1.6</td>\n",
       "      <td>28.0</td>\n",
       "      <td>28.1</td>\n",
       "      <td>62.7</td>\n",
       "      <td>0.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15678</th>\n",
       "      <td>0.49</td>\n",
       "      <td>1.6</td>\n",
       "      <td>27.3</td>\n",
       "      <td>29.4</td>\n",
       "      <td>73.3</td>\n",
       "      <td>0.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15679</th>\n",
       "      <td>0.49</td>\n",
       "      <td>1.6</td>\n",
       "      <td>27.3</td>\n",
       "      <td>29.4</td>\n",
       "      <td>73.3</td>\n",
       "      <td>0.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15680</th>\n",
       "      <td>0.50</td>\n",
       "      <td>1.6</td>\n",
       "      <td>26.9</td>\n",
       "      <td>28.2</td>\n",
       "      <td>49.0</td>\n",
       "      <td>0.51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15681</th>\n",
       "      <td>0.38</td>\n",
       "      <td>1.6</td>\n",
       "      <td>27.8</td>\n",
       "      <td>28.1</td>\n",
       "      <td>49.5</td>\n",
       "      <td>0.51</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Clo  Met  Air temperature (¡C)  Radiant temperature (¡C)  \\\n",
       "15677  0.47  1.6                  28.0                      28.1   \n",
       "15678  0.49  1.6                  27.3                      29.4   \n",
       "15679  0.49  1.6                  27.3                      29.4   \n",
       "15680  0.50  1.6                  26.9                      28.2   \n",
       "15681  0.38  1.6                  27.8                      28.1   \n",
       "\n",
       "       Relative humidity (%)  Air velocity (m/s)  \n",
       "15677                   62.7                0.05  \n",
       "15678                   73.3                0.20  \n",
       "15679                   73.3                0.20  \n",
       "15680                   49.0                0.51  \n",
       "15681                   49.5                0.51  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 1,  0, -1, -2, -3,  2,  3], dtype=int64)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pmv.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15677     1\n",
       "15678     1\n",
       "15679     1\n",
       "15680     0\n",
       "15681     0\n",
       "         ..\n",
       "104034    0\n",
       "104035    0\n",
       "104036    0\n",
       "104037    0\n",
       "104038    0\n",
       "Name: PMV, Length: 30651, dtype: int64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pmv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Second model output\n",
    "y_sensation=clean_data['Thermal sensation']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15677    1\n",
       "15678    0\n",
       "15679    0\n",
       "15680    1\n",
       "15681    2\n",
       "Name: Thermal sensation, dtype: int64"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_sensation.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(30651, 6)\n",
      "(30651,)\n",
      "(30651,)\n"
     ]
    }
   ],
   "source": [
    "print(x.shape)\n",
    "print(y_pmv.shape)\n",
    "print(y_sensation.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Simple Model development"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train, x_test, y_train, y_test=train_test_split(x, y_pmv, test_size=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(24520, 6)\n",
      "(24520,)\n",
      "(6131, 6)\n"
     ]
    }
   ],
   "source": [
    "print(x_train.shape)\n",
    "print(y_train.shape)\n",
    "print(x_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC(gamma='auto')"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model=svm.SVC(gamma='auto')\n",
    "model.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8422769531887131"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.score(x_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "yhat=model.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-1,  0,  0,  0,  1,  0,  0, -1,  0,  0,  0,  0,  0, -1,  0,  0,  0,\n",
       "        0,  1,  0], dtype=int64)"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "yhat[:20]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Hyperparameter Tuning using Randomized search CV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# from sklearn.model_selection import RandomizedSearchCV\n",
    "\n",
    "# rs=RandomizedSearchCV(svm.SVC(gamma='auto'),{\n",
    "#     'C':[1,10,20],\n",
    "#     'kernel':['rbf','linear']\n",
    "#   },\n",
    "#           cv=5,\n",
    "#           return_train_score=False\n",
    "#           n_iter=2\n",
    "#         )\n",
    "\n",
    "# rs.fit(x,y_pmv)\n",
    "# pd.DataFrame(rs.cv_results)[['Parameter_c','param_kernal','mean_test_score']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# HyperParameter Tuning for multiple models using Randomized search CV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "model_params={\n",
    "    'svm':{\n",
    "        'model':svm.SVC(gamma='auto'),\n",
    "        'params':{\n",
    "            'C':[1,10,20],\n",
    "            'kernel':['linear','rbf']\n",
    "        }\n",
    "    },\n",
    "    'random_forest':{\n",
    "        'model':RandomForestClassifier(),\n",
    "        'params':{\n",
    "            'n_estimators':[1,5,10]\n",
    "        }\n",
    "    },\n",
    "    'logistic_regresson':{\n",
    "        'model':LogisticRegression(solver='liblinear',multi_class='auto'),\n",
    "        'params':{\n",
    "            'C':[1,5,10]\n",
    "        }\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Mohammed Shreef\\anaconda3\\lib\\site-packages\\sklearn\\svm\\_base.py:976: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\"Liblinear failed to converge, increase \"\n",
      "C:\\Users\\Mohammed Shreef\\anaconda3\\lib\\site-packages\\sklearn\\svm\\_base.py:976: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\"Liblinear failed to converge, increase \"\n",
      "C:\\Users\\Mohammed Shreef\\anaconda3\\lib\\site-packages\\sklearn\\svm\\_base.py:976: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\"Liblinear failed to converge, increase \"\n",
      "C:\\Users\\Mohammed Shreef\\anaconda3\\lib\\site-packages\\sklearn\\svm\\_base.py:976: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\"Liblinear failed to converge, increase \"\n",
      "C:\\Users\\Mohammed Shreef\\anaconda3\\lib\\site-packages\\sklearn\\svm\\_base.py:976: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\"Liblinear failed to converge, increase \"\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "scores=[]\n",
    "for model_name,param in model_params.items():\n",
    "    r_search=RandomizedSearchCV(param['model'], param['params'], cv=5, return_train_score=False, n_iter=2)\n",
    "    r_search.fit(x,y_pmv)\n",
    "    scores.append({\n",
    "        'model':model_name,\n",
    "        'best_score':r_search.best_score_,\n",
    "        'best_parameters':r_search.best_params_\n",
    "    })"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "df=pd.DataFrame(scores, columns=['model','best_score','best_parameters'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model</th>\n",
       "      <th>best_score</th>\n",
       "      <th>best_parameters</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>svm</td>\n",
       "      <td>0.914717</td>\n",
       "      <td>{'kernel': 'linear', 'C': 1}</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>random_forest</td>\n",
       "      <td>0.840167</td>\n",
       "      <td>{'n_estimators': 10}</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>logistic_regresson</td>\n",
       "      <td>0.710123</td>\n",
       "      <td>{'C': 5}</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                model  best_score               best_parameters\n",
       "0                 svm    0.914717  {'kernel': 'linear', 'C': 1}\n",
       "1       random_forest    0.840167          {'n_estimators': 10}\n",
       "2  logistic_regresson    0.710123                      {'C': 5}"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "SVM model with arguments c=10 and kernel = Linear gives best accuracy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Model with above best parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9337791551133583"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "classifier=svm.SVC(kernel='linear',C=10)\n",
    "classifier.fit(x_train,y_train)\n",
    "\n",
    "classifier.score(x_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-1,  0,  0,  0,  1,  0,  0, -1,  0,  0], dtype=int64)"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_predicted=model.predict(x_test)\n",
    "y_predicted[0:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Confusion Matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import plot_confusion_matrix\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_confusion_matrix(classifier,x_test,y_test)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Converting to pickle file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pickle\n",
    "pickle_out = open(\"classifier.pkl\",\"wb\")\n",
    "pickle.dump(classifier, pickle_out)\n",
    "pickle_out.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
